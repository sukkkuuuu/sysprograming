1. 리눅스에서 기본적으로 제공하는 도움말을 얻는 방법 3가지 이상을 기술하시오.
man 명령어, info 명령어, 명령어 --help

2. vi 에디터의 모드(명령, 편집, :)에 대해 설명하고 이동(5), 삭제(5), 복	사(1), 붙여넣기(1), 블럭지정(1), 탐색(1), 찾기(1), 바꾸기(1) 명령에 대해 기술하시오.
명령어 모드 : vi를 시작할 때 실행되는 모드
입력 모드 : 명령어 모드에서 i또는 a를 눌려 입력 모드로 넘어갈 수 있고, 입력 모드에서는 자유롭게 코드나 글을 작성할 수있다
	명령어 모드로 돌아가고 싶으면 esc를 누르면 된다
콜론 모드 : 명령 모드에서 :을 입력하면 화면 맨 아랫줄에 입력 가능한 공간이 출력되고 여기서 vi를 종료할 수 있다
이동(5) : h, j, k, l , w: 좌, 하, 상, 우 커서 이동, 다음 단어의 첫 글자로 이동
삭제(5) : x, X, dw, db, dd : 커서에 있는 글자 삭제, 커서 앞에있는 글자 삭제, 커서를 기준으로 뒤에 있는 단어글자 삭제(커서 포함), 커서를 기준으로 앞에 있는 단어 글자 삭제,
			커서가 있는 라인(줄) 삭제
복사(1) : yw : 커서를 기준으로 뒤에 있는 단어 글자 복사(커서 포함)
붙여넣기(1) : p : 커서 다음에 붙여넣기
찾기(1) : n : 뒤로 검색
탐색(1) : /문자열 : 문자열 탐색
바꾸기(1) : %s/old/new/g : 문서전체에서  old를 찾아 new로 바꾼다
블럭지정(1) : 명령어 모드에서 ctrl + v

3. 동기, 비동기, 블럭, 넌블럭에 대해 기술하시오.
블럭/동기 : 제어권을 넘겨주지 않고 결과값에 관심있다
블럭/비동기 : 제어권을 넘겨주지 않고 결과값에 관심없다
넌블럭/동기 : 제어권을 바로 넘겨주고 결과값에 관심있다
넌블럭/비동기 : 제어권을 바로 넘겨주고 결과값에 관심없다


블럭 : 자신의 작업을 진행하다가 다른 주체의 작업이 시작되면 다른 작업이 끝날 떄까지 기다렸다가 자신의 작업을 시작하는 것 
논 블록 : 다른 주체의 작업에 상관없이 자신의 작업을 하는 것 
동기 : 작업을 동시에 수행하거나 , 동시에 끝나거나 , 끝나는 동시에 시작함
비동기 : 시작, 종료가 일치하지 않으며, 끝나는 동시에 시작을 하지않음

4. 시스템 호출과 C 라이브러리 함수에 대해 기술하시오.
시스템 호출이란 커널에 직접 서비스를 요청하는 것을 말한다. 
시스템 호출을 통해서 커널에 요구를 하면 interrupt 발생시키고 거기에 대한 내용을 처리해서 전해준다. 
주로 하드웨어, 프로세스, 파일의 I/O등을 처리하며 프로그램은 사용자(User) 모드가 아닌 커널 모드로 실행된다. 
대표적인 시스템 호출 함수로는 open, read, write가 있다. 라이브러리 함수는 시스템 호출 함수를 래핑 한 것이다. 
매번마다 요청하면 o/s에 과부하가 걸리기 떄문에 함수 내부에서 메모리 할당/해제가 일어나고, 
잦은 커널 호출로 인한 성능 손실을 줄이기 위해 입력을 모았다가 한 번에 커널에 요청하기도 한다.

5. 라이브러리, API, ABI, framework에 대해 기술하시오.
라이브러리 : 주로 소프트웨어를 개발할 떄 컴퓨터 프로그램이 사용하는 비휘발성 자원의 모임
API (애플리케이션 프로그래밍 인터페이스): 일종의 소프트웨어 인터페이스이며 다른 종류의 소프트웨어에 서비스를 제공한다
ABI(응용 프로그램 이진 인터페이스) : 응용 프로그램과 운영체제 간에서 사용되는 낮은 수준의 인터페이스
framwork : 어떠한 목적을 달성하기 위해 복잡하게 얽혀있는 문제를 해결하기 위한 구조며, 소프트웽어 개발에 있어 하나의 빼겨 역할을 한다

6. student.h, dbcreate.c dbquery.c dbupdate.c를 기술하시오.
@@@@@@@@@@@@@@@@student.h@@@@@@@@@@@@@@@
#define MAX 24
#define START_ID 1401001
struct student {
        char name[MAX];
        int id;
        int score;
};
@@@@@@@@@@@@2dbcreate.c@@@@@@@@@@@@@@@@
 #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include "student.h"
/* 학생 정보를 입력받아 데이터베이스 파일에 저장한다. */
int main(int argc, char *argv[])
{
        int fd;
        struct student record;
        if (argc < 2) {
                fprintf(stderr, "사용법 : %s file\n", argv[0]);
                exit(1);
        }
        if ((fd = open(argv[1], O_WRONLY|O_CREAT|O_EXCL, 0640)) == -1) {
                perror(argv[1]);
                exit(2);
        }
        printf("%-9s %-8s %-4s\n", "학번", "이름", "점수");
        while (scanf("%d %s %d", &record.id, record.name, &record.score) == 3) {
                lseek(fd, (record.id - START_ID) * sizeof(record), SEEK_SET);
                write(fd, (char *) &record, sizeof(record) );
        }
        close(fd);
        exit(0);
}
@@@@@@@@@@@dbquery.c@@@@@@@@@@@@@@@
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include "student.h"
/* 학번을 입력받아 해당 학생의 레코드를 파일에서 읽어 출력한다. */
int main(int argc, char *argv[])
{
        int fd, id;
        char c;
        struct student record;
        if (argc < 2) {
                fprintf(stderr, "사용법 : %s file\n", argv[0]);
                exit(1);
        }
        if ((fd = open(argv[1], O_RDONLY)) == -1) {
                perror(argv[1]);
                exit(2);
        }
        do {
                printf("\n검색할 학생의 학번 입력:");
                if (scanf("%d", &id) == 1) {
                        lseek(fd, (id-START_ID)*sizeof(record), SEEK_SET);
                        if ((read(fd, (char *) &record, sizeof(record)) > 0) && (record.id != 0))
                                printf("이름:%s\t 학번:%d\t 점수:%d\n", record.name, record.id,
                                                record.score);
                        else printf("레코드 %d 없음\n", id);
                }
                else printf("입력 오류");
                printf("계속하겠습니까?(Y/N)");
                scanf(" %c", &c);
        } while (c=='Y');
        close(fd);
        exit(0);
}

//////////////////////////////////////////////dbupdate.c///////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include "student.h"
/* 학번을 입력받아 해당 학생 레코드를 수정한다. */
int main(int argc, char *argv[])
{
        int fd, id;
        char c;
        struct student record;
        if (argc < 2) {
                fprintf(stderr, "사용법 : %s file\n", argv[0]);
                exit(1);
        }
        if ((fd = open(argv[1], O_RDWR)) == -1) {
                perror(argv[1]);
                exit(2);
        }
        do {
                printf("수정할 학생의 학번 입력: ");
                if (scanf("%d", &id) == 1) {
                        lseek(fd, (long) (id-START_ID)*sizeof(record), SEEK_SET);
                        if ((read(fd, (char *) &record, sizeof(record)) > 0) && (record.id != 0)) {
                                printf("학번:%8d\t 이름:%4s\t 점수:%4d\n",
                                                record.id, record.name, record.score);
                                printf("새로운 점수: ");
                                scanf("%d", &record.score);
                                lseek(fd, (long) -sizeof(record), SEEK_CUR);
                                write(fd, (char *) &record, sizeof(record));
                        } else printf("레코드 %d 없음\n", id);
                } else printf("입력오류\n");
                printf("계속하겠습니까?(Y/N)");
                scanf(" %c",&c);
        } while (c == 'Y');
        close(fd);
        exit(0);
}
7. 인의예지신과 중도에 대해 기술하시오(F 방지문제).

인 측은지심
의 수오지심
예 사양지심
지 시비지심
신 광명지심
적당히